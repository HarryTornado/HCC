
#==================================================================================
#
#	rv_functions
#
#==================================================================================
#
# 	cancelSignalIfRouteSet
#		This function send "RemoveQueueEntry" and "CancelSignal" commands to RouteValidation,
#		if a route was already set for this signal
# 
#	arguments:
#		$1 ........ domain
#		$2 ........ entry signal
#
function cancelSignalIfRouteSet {
	domain=$1
	entrySignal=$2
	
	needCancel="no"
	
	ret=`curl http://railwaystatemanager.${domain}:8080/signal/${entrySignal} 2>/dev/null`
	status=${ret:${route_set}:1}
	if [[ "$status" == "1" ]]
	then
		needCancel="yes"
	fi
	
	if [[ "$needCancel" != "yes" ]]
	then
		echo `curl http://RouteValidation.${domain}:8080/StoredRoutesList 2>/dev/null` | grep "entry_signal=\"$entrySignal\"" >/dev/null
		if [[ "$?" == "0" ]]
		then
			needCancel="yes"
		fi
	fi
	
	if [[ "$needCancel" == "yes" ]]
	then
		curl -X PUT --data "RemoveQueueEntry signal=${entrySignal}" -H 'content-type:text/plain' http://routevalidation.${domain}:8080/cli 2>/dev/null
		curl -X PUT --data "CancelSignal signal=${entrySignal}" -H 'content-type:text/plain' http://routevalidation.${domain}:8080/cli 2>/dev/null
                
		#wait until the route is cancelled
		waitTime=0
		getTime
		startTime=$now
		time_passed $startTime
		
		ret=`curl http://railwaystatemanager.${domain}:8080/signal/${entrySignal} 2>/dev/null`
		status=${ret:${route_set}:1}
			
		while [[ "$status" == "1" && "$waitTime" -lt "$cancel_time" ]]
		do
			time_passed $startTime
			waitTime=$timeGapSec
			
			ret=`curl http://railwaystatemanager.${domain}:8080/signal/${entrySignal} 2>/dev/null`
			status=${ret:${route_set}:1}
		done
		
		# check entry signal status
		ret=`curl http://railwaystatemanager.${domain}:8080/signal/${entrySignal} 2>/dev/null`
		status=${ret:${route_set}:1}
		if [[ "$status" == "1" ]]
		then
			echo "        Error: can not cancel signal ${entrySignal}."
		else
			echo "        Spent $timeGapReport seconds to cancel signal ${entrySignal}"
		fi
		
		sleep 2
	fi
}

#
# 	cancelSignal
#		This function send "RemoveQueueEntry" and "CancelSignal" commands to RouteValidation
# 
#	arguments:
#		$1 ........ domain
#		$2 ........ entry signal
#
function cancelSignal {
	domain=$1
	entrySignal=$2
	
	curl -X PUT --data "RemoveQueueEntry signal=${entrySignal}" -H 'content-type:text/plain' http://routevalidation.${domain}:8080/cli 2>/dev/null
	curl -X PUT --data "CancelSignal signal=${entrySignal}" -H 'content-type:text/plain' http://routevalidation.${domain}:8080/cli 2>/dev/null
                
	#wait until the route is cancelled
	waitTime=0
	getTime
	startTime=$now
	time_passed $startTime
	
	ret=`curl http://railwaystatemanager.${domain}:8080/signal/${entrySignal} 2>/dev/null`
	status=${ret:${route_set}:1}
	
	while [[ "$status" == "1" && "$waitTime" -lt "$cancel_time" ]]
	do
		time_passed $startTime
		waitTime=$timeGapSec
		
		ret=`curl http://railwaystatemanager.${domain}:8080/signal/${entrySignal} 2>/dev/null`
		status=${ret:${route_set}:1}
	done
		
	# check entry signal status
	ret=`curl http://railwaystatemanager.${domain}:8080/signal/${entrySignal} 2>/dev/null`
	status=${ret:${route_set}:1}
	if [[ "$status" == "1" ]]
	then
		echo "        Error: can not cancel signal ${entrySignal} of route ${routeId}."
	else
		echo "        Spent $timeGapReport seconds to cancel signal ${entrySignal}"
	fi
		
	sleep 2
}
#
#	setRoute
#		this function set a route from a the first signal to the second signal.
#
#	arguments:
#		$1 .......... domain
#		$2 .......... the route
#		$3 .......... entry signal
#		$4 .......... exit signal
#
#	globals/return value
#		routeStored ...............
#					"yes" ............... 
#					"no"
#		routeSet ..................
#					"yes" ...............
#					"no" ................
#  
function setRoute {
	domain=$1
	routeId=$2
	entrySignal=$3
	exitSignal=$4
	
	#setting the route ...
	curl -X PUT --data "SetRoute cmd-name=SRO workstation=UNDEFINED bypass=FALSE signals=${entrySignal} ${exitSignal}" -H 'content-type:text/plain' http://routevalidation.${domain}:8080/cli 2>/dev/null
	
	#wait until the route is set or time out
	waitTime=0
	getTime
	startTime=$now
	time_passed $startTime
       
	ret=`curl http://railwaystatemanager.${domain}:8080/signal/${entrySignal} 2>/dev/null`
	status=${ret:${signal_stop}:2}
    
	while [[ "$status" != "01" && "${waitTime}" -lt "${setroute_time}" ]]
	do
		time_passed $startTime
		waitTime=$timeGapSec
		
		ret=`curl http://railwaystatemanager.${domain}:8080/signal/${entrySignal} 2>/dev/null`
		status=${ret:${signal_stop}:2}
	done

	routeStored="no"
	routeSet="no"
	
	# check entry signal status
	ret=`curl http://railwaystatemanager.${domain}:8080/signal/${entrySignal} 2>/dev/null`
	status=${ret:${signal_stop}:2}
	if [[ "$status" != "01" ]]
	then
		echo -n "        Error: the entry signal ${entrySignal} of route ${routeId} is not cleared. "
		status=${ret:${route_set}:1}
		if [[ "$status" == "1" ]]
		then
			echo "But the route is set."
			routeSet="yes"
		else
			echo -n "The route is not set at all. "
			echo `curl http://RouteValidation.${domain}:8080/StoredRoutesList 2>/dev/null` | grep "entry_signal=\"$entrySignal\"" | grep "exit_signal=\"$exitSignal\"" > /dev/null
			if [[ "$?" == "0" ]]
			then
				routeStored="yes"
				echo "However, the route is stored."
			else
				echo ""
			fi
		fi
	else
		routeSet="yes"
		echo "        Spent $timeGapReport seconds to set route ${routeId}: ${entrySignal}->${exitSignal}"
	fi
}


